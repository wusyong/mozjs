name: Rust

on:
  push:
    branches: [main]
  pull_request:

env:
  RUST_BACKTRACE: 1
  SHELL: /bin/bash
  CARGO_INCREMENTAL: 0
  MOZJS_CREATE_ARCHIVE: 1
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  REPO: ${{ github.repository_owner }}/mozjs

jobs:
  # mac-arm:
  #   runs-on: macos-14
  #   needs: create-release
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       features: ["--features streams"]
  #   env:
  #     RUSTC_WRAPPER: sccache
  #     CCACHE: sccache
  #     SCCACHE_GHA_ENABLED: "true"
  #     RELEASE_ID: ${{ needs.create-release.outputs.release-id }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install deps
  #       run: |
  #         # Unlink and re-link to prevent errors when github mac runner images
  #         # https://github.com/actions/setup-python/issues/577
  #         brew list -1 | grep python | while read formula; do brew unlink $formula; brew link --overwrite $formula; done
  #         brew install llvm yasm
  #     - name: Run sccache-cache
  #       uses: mozilla-actions/sccache-action@v0.0.3
  #     - name: Build
  #       run: |
  #         cargo build --verbose ${{ matrix.features }}
  #         cargo test --tests --examples --verbose ${{ matrix.features }}
  #     - name: Upload release asset
  #       run: |
  #         curl -L \
  #           -X POST \
  #           -H "Accept: application/vnd.github+json" \
  #           -H "Authorization: Bearer ${GITHUB_TOKEN}" \
  #           -H "X-GitHub-Api-Version: 2022-11-28" \
  #           -H "Content-Type: application/octet-stream" \
  #           "https://uploads.github.com/repos/${REPO}/releases/${RELEASE_ID}/assets?name=libmozjs-aarch64-apple-darwin.tar.gz" \
  #           --data-binary "@target/libmozjs-aarch64-apple-darwin.tar.gz"

  # mac-x86_64:
  #   runs-on: macos-13
  #   needs: create-release
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       features: ["--features streams"]
  #   env:
  #     RUSTC_WRAPPER: sccache
  #     CCACHE: sccache
  #     SCCACHE_GHA_ENABLED: "true"
  #     RELEASE_ID: ${{ needs.create-release.outputs.release-id }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Install deps
  #       run: |
  #         # Unlink and re-link to prevent errors when github mac runner images
  #         # https://github.com/actions/setup-python/issues/577
  #         brew list -1 | grep python | while read formula; do brew unlink $formula; brew link --overwrite $formula; done
  #         brew install llvm yasm
  #     - name: Run sccache-cache
  #       uses: mozilla-actions/sccache-action@v0.0.3
  #     - name: Build
  #       run: |
  #         cargo build --verbose ${{ matrix.features }}
  #         cargo test --tests --examples --verbose ${{ matrix.features }}
  #     - name: Upload release asset
  #       run: |
  #         curl -L \
  #           -X POST \
  #           -H "Accept: application/vnd.github+json" \
  #           -H "Authorization: Bearer ${GITHUB_TOKEN}" \
  #           -H "X-GitHub-Api-Version: 2022-11-28" \
  #           -H "Content-Type: application/octet-stream" \
  #           "https://uploads.github.com/repos/${REPO}/releases/${RELEASE_ID}/assets?name=libmozjs-x86_64-apple-darwin.tar.gz" \
  #           --data-binary "@target/libmozjs-x86_64-apple-darwin.tar.gz"

  # linux:
  #   env:
  #     RUSTC_WRAPPER: "sccache"
  #     CCACHE: sccache
  #     SCCACHE_GHA_ENABLED: "true"
  #   runs-on: ubuntu-latest
  #   needs: create-release
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       features: ["--features streams"]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: dtolnay/rust-toolchain@stable
  #     - name: Install deps
  #       run: |
  #         sudo apt install llvm -y
  #     - name: Run sccache-cache
  #       uses: mozilla-actions/sccache-action@v0.0.3
  #     - name: Build
  #       run: |
  #         cargo build --verbose ${{ matrix.features }}
  #         cargo test --tests --examples --verbose ${{ matrix.features }}
  #     - name: Upload release asset
  #       env:
  #         RELEASE_ID: ${{ needs.create-release.outputs.release-id }}
  #       run: |
  #         curl -L \
  #           -X POST \
  #           -H "Accept: application/vnd.github+json" \
  #           -H "Authorization: Bearer ${GITHUB_TOKEN}" \
  #           -H "X-GitHub-Api-Version: 2022-11-28" \
  #           -H "Content-Type: application/octet-stream" \
  #           "https://uploads.github.com/repos/${REPO}/releases/${RELEASE_ID}/assets?name=libmozjs-x86_64-unknown-linux-gnu.tar.gz" \
  #           --data-binary "@target/libmozjs-x86_64-unknown-linux-gnu.tar.gz"

  windows:
    runs-on: windows-latest
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        features: ["--features streams"]
        target: ["x86_64-pc-windows-msvc"]
    env:
      LINKER: "lld-link.exe"
      CC: "clang-cl"
      CXX: "clang-cl"
      MOZTOOLS_PATH: "${{ github.workspace }}\\target\\dependencies\\moztools-4.0"
      CCACHE: sccache
      SCCACHE_GHA_ENABLED: "true"
      RELEASE_ID: ${{ needs.create-release.outputs.release-id }}
    steps:
      - uses: actions/checkout@v4
      # - uses: dtolnay/rust-toolchain@stable
      #   with:
      #     targets: ${{ matrix.target }}
      # - name: Install deps
      #   run: |
      #     curl -SL "https://github.com/servo/servo-build-deps/releases/download/msvc-deps/moztools-4.0.zip" --create-dirs -o target/dependencies/moztools.zip
      #     cd target/dependencies && unzip -qo moztools.zip -d .
      # - name: Run sccache-cache
      #   uses: mozilla-actions/sccache-action@v0.0.3
      # - name: Build Windows
      #   shell: cmd
      #   run: |
      #     cargo build --verbose --target ${{ matrix.target }} ${{ matrix.features }}
      # - name: Test Windows
      #   if: ${{ !contains(matrix.target, 'aarch64') }}
      #   shell: cmd
      #   run: |
      #     cargo test --tests --examples --verbose --target ${{ matrix.target }} ${{ matrix.features }}
      - name: Upload release asset
        # uses: actions/upload-release-asset@v1
        # with:
        #   upload_url: https://uploads.github.com/repos/${{ github.repository_owner }}/mozjs/releases/${{ needs.create-release.outputs.release-id }}/assets{?name,label}
        #   asset_path: ./Cargo.toml
        #   asset_name: Cargo.toml
        #   asset_content_type: application/toml
        run: |
          curl -L `
            -X POST `
            -H "Accept: application/vnd.github+json" `
            -H "Authorization: Bearer ${GITHUB_TOKEN}" `
            -H "X-GitHub-Api-Version: 2022-11-28" `
            -H "Content-Type: application/octet-stream" `
            --http1.1 `
            "https://uploads.github.com/repos/${REPO}/releases/${RELEASE_ID}/assets?name=Cargo.toml" `
            --data-binary "@Cargo.toml"

  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Create release
        id: create-release
        run: |
          NIGHTLY_TAG=$(date "+%F")
          RELEASE_URL=$(gh release create "${NIGHTLY_TAG}" \
            --draft \
            --title "${NIGHTLY_TAG}" \
            --notes 'Version release based on servo/mozjs@${{ github.sha }}' \
            --repo ${REPO})
          TEMP_TAG=$(basename "$RELEASE_URL")
          RELEASE_ID=$( \
            gh api -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${REPO}/releases/tags/${TEMP_TAG}" \
            | jq '.id' \
          )
          echo "RELEASE_ID=${RELEASE_ID}" >> ${GITHUB_OUTPUT}
    outputs:
      release-id: ${{ steps.create-release.outputs.RELEASE_ID }}

  publish-release:
    name: Result
    runs-on: ubuntu-latest
    needs:
      ["create-release", "windows"]
    if: ${{ always() }}
    env:
      RELEASE_ID: ${{ needs.create-release.outputs.release-id }}
    steps:
      - name: Publish as latest (success)
        if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
        run: |
          gh api \
            --method PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${REPO}/releases/${RELEASE_ID} \
            -F draft=false
      - name: Publish as latest (failure)
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: |
          gh api \
            --method PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${REPO}/releases/${RELEASE_ID} \
            -F prerelease=true -F draft=false


