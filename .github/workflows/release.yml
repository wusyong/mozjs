name: Rust

on:
  push:
    branches: [main]
  pull_request:

env:
  RUST_BACKTRACE: 1
  SHELL: /bin/bash
  CARGO_INCREMENTAL: 0
  MOZJS_CREATE_MIRROR: 1

jobs:
  mac:
    runs-on: macos-13
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        features: ["--features streams"]
    env:
      RUSTC_WRAPPER: sccache
      CCACHE: sccache
      SCCACHE_GHA_ENABLED: "true"
    steps:
      - uses: actions/checkout@v4
      - name: Install deps
        run: |
          # Unlink and re-link to prevent errors when github mac runner images
          # https://github.com/actions/setup-python/issues/577
          brew list -1 | grep python | while read formula; do brew unlink $formula; brew link --overwrite $formula; done
          brew install llvm yasm
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: Build
        run: |
          cargo build --verbose ${{ matrix.features }}
          cargo test --tests --examples --verbose ${{ matrix.features }}
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: mozjs-sys/libjs.tar.gz
          asset_name: libjs-x86_64-apple-darwin.tar.gz
          asset_content_type: application/x-gzip
  linux:
    env:
      RUSTC_WRAPPER: "sccache"
      CCACHE: sccache
      SCCACHE_GHA_ENABLED: "true"
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        features: ["--features streams"]
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install deps
        run: |
          sudo apt install llvm -y
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: Build
        run: |
          cargo build --verbose ${{ matrix.features }}
          cargo test --tests --examples --verbose ${{ matrix.features }}
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: mozjs-sys/libjs.tar.gz
          asset_name: libjs-x86_64-unknown-linux-gnu.tar.gz
          asset_content_type: application/x-gzip

  windows:
    runs-on: windows-latest
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        features: ["--features streams"]
        target: ["x86_64-pc-windows-msvc"]
    env:
      LINKER: "lld-link.exe"
      CC: "clang-cl"
      CXX: "clang-cl"
      MOZTOOLS_PATH: "${{ github.workspace }}\\target\\dependencies\\moztools-4.0"
      CCACHE: sccache
      SCCACHE_GHA_ENABLED: "true"
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - name: Install deps
        run: |
          curl -SL "https://github.com/servo/servo-build-deps/releases/download/msvc-deps/moztools-4.0.zip" --create-dirs -o target/dependencies/moztools.zip
          cd target/dependencies && unzip -qo moztools.zip -d .
      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: Build Windows
        shell: cmd
        run: |
          cargo build --verbose --target ${{ matrix.target }} ${{ matrix.features }}
      - name: Test Windows
        if: ${{ !contains(matrix.target, 'aarch64') }}
        shell: cmd
        run: |
          cargo test --tests --examples --verbose --target ${{ matrix.target }} ${{ matrix.features }}
      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: mozjs-sys/libjs.tar.gz
          asset_name: libjs-x86_64-pc-windows-msvc.tar.gz
          asset_content_type: application/x-gzip

  create-release:
    runs-on: ubuntu-latest
    outputs: 
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: tag-${{ github.sha }}
          release_name: Release ${{ github.sha }}
          draft: true
          prerelease: false

  publish-release:
    name: Result
    runs-on: ubuntu-latest
    needs:
      ["linux", "mac", "windows", "create-release"]
    if: ${{ always() }}
    steps:
      - name: Publish release and mark job successful
        if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') }}
        uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ needs.create-release.outputs.release_id }}
      - name: Mark the job as unsuccessful
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') }}
        run: exit 1
